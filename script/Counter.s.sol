// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Script, console2} from "forge-std/Script.sol";

interface IPyth {
    function updatePriceFeeds(bytes[] memory updateData) external payable;
    function getUpdateFee(bytes[] memory updateData) external view returns (uint256);
}

contract Counter is Script {
    uint256 pk = uint256(vm.envBytes32("PRIVATE_KEY"));
    address contractAddress = 0x8250f4aF4B972684F7b336503E2D6dFeDeB1487a;
    bytes32 priceId = 0xd9d22050e7413a16129f1334cd4dd5a359975ce16389cdadae8f677cf46e2839;

    function setUp() public {}

    function run() public {
        vm.startBroadcast(pk);
        bytes[] memory updateData = new bytes[](1);

        // gotten from https://hermes.pyth.network/docs/#/rest/price_feeds_metadata using id `d9d22050e7413a16129f1334cd4dd5a359975ce16389cdadae8f677cf46e2839`
        updateData[0] =
            "0x504e41550100000003b801000000040d008b8983afd71c4f90fe9126860814466c583a499c41fe1ed6e4aee3422bd5a5ca05d1393e92b18a549aef1550c089df35698b94179013b367e7d6d91b5072b751010287807288e914ec13b2e6d282f36d7a974d8e0bacc75404ae7d1fb9e0d02af4c17c50c6c1903342daadfab13bfe725726a45f1e00ccd92b13d1cfff144a8d716901037cd508d045f2160b9148722dad46300b95fb42b0fabc4409ae7bb128e26090235938420985b905a243667374ebf5d7e0294eadc256884ca03416eb7ffe76c3150004515c38b3cac9bacf274906cb1ba0a298a8a88b5c29e1114eadf6ec89e7ca2cee237055ae4e7b7f6674a51e4ee00286a6bb0046709e2f86a397c1a1a4a726df9800064470c07973fe17809d4c083b06bc1f4cd490237b56f3f773519d20c8138e92305d54c73f54f71cb93f13859ac211f39278eb482c0810ca47b4f073f35035e5a1000a1ff49af7a0426f544a1118ee62fdf6b5dd3c2d98c964dd8db252267984797fb510ceb8f85bdc48d049331d3841d2194481dbcbd7e87be315add17251aa41f6c0000b99ad3a636b59f20cab4866382adbcf393ed78449df11217ec53aaf23754440333faf447f187d431fe7a17c472af93a131f4398e1373c5aad5ed29b98d0b09f0d010c34a13f724d34802636433147cb7dd47d7eede3b4b98b836bedd171c696a2187b42586885d8214b7be15889acc039f2c5239a03490f45a2d187f71de5eeccfbe8010de64857fae2af01cb5f4de974df6509a650429a81d78b1cfa0471287c7c91cecc3c5d5f56f20582dec615e9be7e484fead824327b5bb1ac07ea185e7c1b0aae55000e3d536443201b19948038f6d14033aa7bba375d7f53542dd1f8d34677db16071b7c290441b7e272cd9e8a3ccee3ca63cb362aacc540cfdec7e3cb048909db3bd1010f965deb47b9a1b6e8c912af5f8c7063818636a04b04737007d3c0807e5bc61e43696bce8592b112622146b8aed7a0247ca941cc96ac9ea425e595e29ca57ccbd2001089af36a5281d207f1db4b733c93f119ed5c7f06d3478bead628d0de3bb605cb858bf0af8b08a0c32e6a6a4e76acc5b10d5de87d2edb2f0def74ec2dfa1d0d8dd01116399fca0aa71cdce2174107098ea52193211d987ed90864bdd1e2c1c67d802864264177a2262cd43f3dc05d1533ee026e4eefed3583517c661502cbd5983a6f4006805649200000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa710000000007936273014155575600000000000ca0df9f000027109a7793aa0b50dd598195c17439227a7daa67cc5e01005500d9d22050e7413a16129f1334cd4dd5a359975ce16389cdadae8f677cf46e28390000000000502ae30000000000002765fffffff800000000680564920000000068056491000000000050eb580000000000002a4b0c3d19ccc335b5dca6affb5811923a12e0035a86f4519193a44d70a9330ad2b6945863d7a3a1c316859171b0694bbc78e4fd1e6b7b750c8bd0818b2b81b51599d2d15a3ad961ad9366d31d0dd81828544fdd6bd4746922d5d2c8b62ba42865f4204423195a542d348f62ba9b2a211850e9ca47f9dfa5904fc9fe574330c3d3184c7120aba138d201b2e215235a4c3c5f6243df0f8b39ec4c4d488bbb9f5f97a492598d865ce5e4804b5f569f7c4453575b9fe774da4547a5c1120d6998e00068ecdbc65c46a6375356e4fbbab718b6fa9ca1f3550977ca792f66663ac02f468fcf04084897842108f075b43088f8f51493";

        uint256 fee = IPyth(contractAddress).getUpdateFee(updateData);
        IPyth(contractAddress).updatePriceFeeds{value: fee}(updateData);
        vm.stopBroadcast();
    }
}

/* 
 * Run the script using:
 * forge script --chain mainnet script/Counter.s.sol:Counter --rpc-url $BASE_MAINNET --broadcast
 */
